
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3004;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// Database configuration
console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  connectionTimeoutMillis: 10000,
  idleTimeoutMillis: 30000,
  max: 10
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ –ë–î:', err.message);
});

// Initialize database
async function initDatabase() {
  let client;
  try {
    client = await pool.connect();

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255),
        username VARCHAR(255),
        language_code VARCHAR(10) DEFAULT 'en',
        balance INTEGER DEFAULT 10,
        cards TEXT DEFAULT '[]',
        is_premium BOOLEAN DEFAULT false,
        photo_url TEXT,
        allows_write_to_pm BOOLEAN DEFAULT false,
        winner INTEGER DEFAULT 0,
        games INTEGER DEFAULT 0,
        loses INTEGER DEFAULT 0,
        last_activity VARCHAR(20),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await client.query(`
      ALTER TABLE users 
      ADD COLUMN IF NOT EXISTS winner INTEGER DEFAULT 0,
      ADD COLUMN IF NOT EXISTS games INTEGER DEFAULT 0,
      ADD COLUMN IF NOT EXISTS loses INTEGER DEFAULT 0,
      ADD COLUMN IF NOT EXISTS last_activity VARCHAR(20),
      ADD COLUMN IF NOT EXISTS ban INTEGER DEFAULT NULL
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await client.query(`
      CREATE TABLE IF NOT EXISTS admin (
        maintenance INTEGER DEFAULT 0,
        whitelist TEXT DEFAULT ''
      )
    `);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const adminCheck = await client.query('SELECT maintenance FROM admin LIMIT 1');
    if (adminCheck.rows.length === 0) {
      await client.query('INSERT INTO admin (maintenance, whitelist) VALUES (0, \'\')');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
    await client.query(`
      CREATE TABLE IF NOT EXISTS sponsors (
        position INTEGER PRIMARY KEY CHECK (position IN (1, 2, 3)),
        name VARCHAR(255) NOT NULL,
        url_channel TEXT NOT NULL,
        photo_url TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    await client.query('CREATE INDEX IF NOT EXISTS idx_sponsors_position ON sponsors(position)');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä
    await client.query(`
      CREATE TABLE IF NOT EXISTS game (
        id SERIAL PRIMARY KEY,
        room_code VARCHAR(4) UNIQUE NOT NULL,
        player1 BIGINT NOT NULL,
        player2 BIGINT,
        game_state VARCHAR(20) DEFAULT 'waiting',
        sender_hod INTEGER DEFAULT 0,
        protect_hod INTEGER DEFAULT 0,
        zone_sender INTEGER,
        zone_protect1 INTEGER,
        zone_protect2 INTEGER,
        bet INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä
    await client.query('CREATE INDEX IF NOT EXISTS idx_game_room_code ON game(room_code)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_game_player1 ON game(player1)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_game_player2 ON game(player2)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_game_state ON game(game_state)');

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ users –∏ game');
    console.log('‚úÖ –ü–æ–ª—è users: id, first_name, last_name, username, language_code, balance, cards, is_premium, photo_url, allows_write_to_pm, winner, games, loses, last_activity');
    console.log('‚úÖ –ü–æ–ª—è game: id, room_code, player1, player2, game_state, sender_hod, protect_hod, zone_sender, zone_protect1, zone_protect2, bet');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err.message);
  } finally {
    if (client) client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logRequest(req, message) {
  const timestamp = new Date().toISOString();
  const ip = req.ip || req.connection.remoteAddress || 'unknown';
  const userAgent = req.get('User-Agent') || 'unknown';
  console.log(`[${timestamp}] ${message} | IP: ${ip} | UserAgent: ${userAgent}`);
}

// Routes
app.get('/api/test', (req, res) => {
  logRequest(req, 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  res.json({ 
    status: 'success', 
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    timestamp: new Date().toISOString(),
    port: PORT,
    environment: process.env.NODE_ENV || 'development'
  });
});

app.get('/api/test-db', async (req, res) => {
  logRequest(req, 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î');
  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as db_version');

    res.json({ 
      status: 'success', 
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!', 
      current_time: result.rows[0].current_time,
      db_version: result.rows[0].db_version
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 
      error: err.message,
      code: err.code
    });
  } finally {
    if (client) client.release();
  }
});

// ===== USERS API =====

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
app.get('/api/user/search', async (req, res) => {
  const { id, username } = req.query;
  logRequest(req, `üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=${id}, username=${username}`);

  if (!id && !username) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è ID –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞' 
    });
  }

  let client;
  try {
    client = await pool.connect();
    let result;

    if (id) {
      result = await client.query('SELECT * FROM users WHERE id = $1', [id]);
    } else {
      result = await client.query('SELECT * FROM users WHERE username = $1', [username]);
    }

    if (result.rows.length > 0) {
      const user = result.rows[0];
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${user.first_name} (ID: ${user.id})`);
      res.json({ 
        status: 'success', 
        user: user
      });
    } else {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ID=${id}, username=${username}`);
      res.json({ 
        status: 'success', 
        user: null,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
app.get('/api/user/:id', async (req, res) => {
  const userId = req.params.id;
  logRequest(req, `üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT * FROM users WHERE id = $1', [userId]);

    if (result.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º last_activity
      const now = new Date();
      const lastActivity = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;

      await client.query(
        'UPDATE users SET last_activity = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
        [lastActivity, userId]
      );

      const user = { ...result.rows[0], last_activity: lastActivity };

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º created_at –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
      if (user.created_at) {
        const date = new Date(user.created_at);
        user.created_at_formatted = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
      }

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.first_name} (ID: ${userId})`);
      res.json({ 
        status: 'success', 
        user: user
      });
    } else {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ID ${userId}`);
      res.json({ 
        status: 'success', 
        user: null,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user', async (req, res) => {
  const { 
    id, 
    first_name, 
    last_name, 
    username, 
    language_code, 
    is_premium, 
    photo_url, 
    allows_write_to_pm 
  } = req.body;

  logRequest(req, `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${first_name} (ID: ${id})`);
  console.log(`üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(req.body, null, 2));

  if (!id || !first_name) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return res.status(400).json({ 
      status: 'error', 
      message: 'ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await client.query('SELECT id FROM users WHERE id = $1', [id]);
    if (existingUser.rows.length > 0) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID ${id}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      const user = await client.query('SELECT * FROM users WHERE id = $1', [id]);
      return res.json({ 
        status: 'success', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        user: user.rows[0]
      });
    }

    const result = await client.query(`
      INSERT INTO users (
        id, 
        first_name, 
        last_name, 
        username, 
        language_code, 
        is_premium, 
        photo_url, 
        allows_write_to_pm, 
        balance, 
        cards
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,
      [
        id, 
        first_name, 
        last_name || null, 
        username || null, 
        language_code || 'en', 
        is_premium || false, 
        photo_url || null, 
        allows_write_to_pm || false, 
        10, 
        '[]'
      ]
    );

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${first_name} (ID: ${id}), –±–∞–ª–∞–Ω—Å: 10`);
    console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, result.rows[0]);

    res.json({ 
      status: 'success', 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!', 
      user: result.rows[0] 
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, err.message);
    console.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, err);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
      error: err.message,
      details: err.detail || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π'
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/user/:id/balance', async (req, res) => {
  const userId = req.params.id;
  const { balance } = req.body;
  logRequest(req, `üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId} –Ω–∞ ${balance}`);

  if (balance === undefined || balance === null) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ë–∞–ª–∞–Ω—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    });
  }

  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      'UPDATE users SET balance = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *',
      [balance, userId]
    );

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}: ${balance}`);
      res.json({ 
        status: 'success', 
        message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!', 
        user: result.rows[0] 
      });
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ID ${userId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});






app.post('/api/user/:id/free-case', async (req, res) => {
  const userId = req.params.id;

  // --- –¢–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —à–∞–Ω—Å—ã (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥) ---
  const caseConfig = [
    { name:'–°–µ—Ä–∏–∫–æ–≤', rarity:'rare', chance:60 },
    { name:'–ë–∞—Ä—É–ª–∏–Ω', rarity:'superrare', chance:30 },
    { name:'–ì—Ä–∏—Ü—é–∫', rarity:'epic', chance:6 },
    { name:'–ì–æ–ª–¥–æ–±–∏–Ω', rarity:'mythic', chance:3 },
    { name:'–†–∞–¥—É–ª–æ–≤', rarity:'legendary', chance:1 }
  ];
  const COOLDOWN = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)

  let client;
  try {
    client = await pool.connect();
    const userRes = await client.query('SELECT cards, case_free FROM users WHERE id = $1', [userId]);
    if (userRes.rows.length === 0) {
      return res.status(404).json({ status: 'error', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    const user = userRes.rows[0];
    const now = Date.now();
    if (user.case_free && now < Number(user.case_free)) {
      const wait = Math.ceil((Number(user.case_free) - now)/1000);
      return res.status(400).json({
        status: 'error',
        message: `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è ${wait} —Å–µ–∫.`,
        wait: wait
      });
    }
    // --- –í—ã–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —à–∞–Ω—Å–∞–º ---
    let total = caseConfig.reduce((s,c)=>s+c.chance,0), rnd = Math.random()*total, sum=0, card=null;
    for (let c of caseConfig) {
      sum += c.chance;
      if (rnd <= sum) { card = c; break; }
    }
    if (!card) card = caseConfig[0];
    // --- –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    let cards = user.cards || '';
    let newCards = (!cards || cards.trim()==='' || cards==='[]') ? card.name : cards.trim() + ' ' + card.name;
    let nextTime = now + COOLDOWN;
    await client.query(
      'UPDATE users SET cards = $1, case_free = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $3',
      [newCards, nextTime, userId]
    );
    res.json({
      status: 'success',
      card: { name: card.name, rarity: card.rarity },
      next: nextTime,
      next_sec: Math.ceil((nextTime-now)/1000),
      cards: newCards
    });
  } catch (e) {
    res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: e.message });
  } finally {
    if (client) client.release();
  }
});








// –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
app.post('/api/user/:id/buy-card', async (req, res) => {
  const userId = req.params.id;
  const { cardName, price } = req.body;
  logRequest(req, `üõí –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: ${cardName} –∑–∞ ${price} –∫–ª—é—à–µ–∫ (ID: ${userId})`);

  if (!cardName || !price) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT * FROM users WHERE id = $1', [userId]);

    if (userResult.rows.length === 0) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ID ${userId}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const user = userResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.balance < price) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}: ${user.balance} < ${price}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—à–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏' 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±–∞–ª–∞–Ω—Å
    let currentCards = user.cards || '';
    let newCardsString = '';

    if (!currentCards || currentCards.trim() === '' || currentCards === '[]') {
      newCardsString = cardName;
    } else {
      newCardsString = currentCards.trim() + ' ' + cardName;
    }

    const newBalance = user.balance - price;

    console.log(`üíæ –û–±–Ω–æ–≤–ª—è–µ–º: –±–∞–ª–∞–Ω—Å ${user.balance} -> ${newBalance}, –∫–∞—Ä—Ç–æ—á–∫–∏ "${currentCards}" -> "${newCardsString}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await client.query(
      'UPDATE users SET balance = $1, cards = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $3 RETURNING *',
      [newBalance, newCardsString, userId]
    );

    console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫—É–ø–ª–µ–Ω–∞: ${cardName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}`);
    console.log(`‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}, –∫–∞—Ä—Ç–æ—á–∫–∏: "${newCardsString}"`);

    res.json({ 
      status: 'success', 
      message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!', 
      user: updateResult.rows[0],
      purchasedCard: cardName
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardName} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ö—Ä–∞—Ñ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
app.post('/api/user/:id/craft', async (req, res) => {
  const userId = req.params.id;
  const { recipe, selectedCards } = req.body;
  logRequest(req, `üî® –ö—Ä–∞—Ñ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫: ${recipe} (ID: ${userId})`);

  if (!recipe || !selectedCards) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–†–µ—Ü–µ–ø—Ç –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  // –ü—Ä–∞–≤–∏–ª–∞ –∫—Ä–∞—Ñ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  const craftRecipes = {
    'rare': { 
      required: 3, 
      possibleCards: ['–∞–±—Ä–æ—Å–∏–º–æ–≤', '–±–∞—Ä—É–ª–∏–Ω', '—É–∏–ª—å—è–º', '–≥–µ—Ä–∞—Å—å–∫–∏–Ω', '–¥—ã–Ω—è–∫', '–∫–∞–º–∞—Ä–∞', '–∫–ª–∞—Å—Å–æ–Ω', '–∫–æ–Ω—é—à–∫–æ–≤', '–ª–∏']
    },
    'superrare': { 
      required: 3, 
      possibleCards: ['–≥—Ä–∏—Ü—é–∫', '—Ç–∫–∞—á–µ–≤_–∞', '–±–∞—Ä–∞–±–∞–Ω–æ–≤', '–∞–π–º—É—Ä–∑–∏–Ω', '–±–æ—Ä–∏–∫–æ–≤', '–≥–ª–æ—Ç–æ–≤', '–¥–µ–º—á–µ–Ω–∫–æ', '–¥—Ä–æ–∑–¥–æ–≤', '–∏–ª—å–µ–Ω–∫–æ', '–∫–∞—Ä–∞', '–º–∞–º–∏–Ω', '–ª–æ–∫—Ç–∏–æ–Ω–æ–≤', '—Ñ—É', '—Ä—É—à–∞–Ω']
    },
    'epic': { 
      required: 3, 
      possibleCards: ['–¥–µ–º–∏–¥–æ–≤', '—Ö–º–µ–ª–µ–≤—Å–∫–∏–π', '–≥—É—Ç–∏–∫', '–∫–∞–≥–∞—Ä–ª–∏—Ü–∫–∏–π', '–∫–∞—é–º–æ–≤', '–≥–æ–ª–¥–æ–±–∏–Ω']
    },
    'mythic': { 
      required: 3, 
      possibleCards: ['—à–∞–±–∞–Ω–æ–≤', '–≥–∞–ª–∏–º–æ–≤_–∞—Ä—Ç', '–∫—Ä–∞–≤—Ü–æ–≤', '–∫—É–∑–Ω–µ—Ü–æ–≤', '—Ä–∞–¥—É–ª–æ–≤', '–ª–∏–≤–æ']
    }
  };

  const recipeData = craftRecipes[recipe];
  if (!recipeData) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT * FROM users WHERE id = $1', [userId]);

    if (userResult.rows.length === 0) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞: ID ${userId}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const user = userResult.rows[0];

    // –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userCardsString = user.cards || '';
    const userCardsList = userCardsString.trim() === '' || userCardsString === '[]' ? [] : 
      userCardsString.trim().split(' ').map(card => card.trim()).filter(card => card.length > 0);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const userCardsCount = {};
    userCardsList.forEach(card => {
      const cardKey = card.toLowerCase();
      userCardsCount[cardKey] = (userCardsCount[cardKey] || 0) + 1;
    });

    console.log(`üéØ –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userCardsCount);
    console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:`, selectedCards);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫
    const totalRequired = Object.values(selectedCards).reduce((sum, count) => sum + count, 0);
    if (totalRequired !== recipeData.required) {
      return res.status(400).json({ 
        status: 'error', 
        message: `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ ${recipeData.required} –∫–∞—Ä—Ç–æ—á–µ–∫` 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [cardKey, requiredCount] of Object.entries(selectedCards)) {
      const availableCount = userCardsCount[cardKey.toLowerCase()] || 0;
      if (availableCount < requiredCount) {
        return res.status(400).json({ 
          status: 'error', 
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ "${cardKey}"` 
        });
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    let newCardsList = [...userCardsList];

    // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    for (const [cardKey, count] of Object.entries(selectedCards)) {
      for (let i = 0; i < count; i++) {
        const index = newCardsList.findIndex(card => card.toLowerCase() === cardKey.toLowerCase());
        if (index !== -1) {
          newCardsList.splice(index, 1);
        }
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
    const randomIndex = Math.floor(Math.random() * recipeData.possibleCards.length);
    const craftedCard = recipeData.possibleCards[randomIndex];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    newCardsList.push(craftedCard);

    const newCardsString = newCardsList.join(' ');

    console.log(`üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏: "${userCardsString}" -> "${newCardsString}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await client.query(
      'UPDATE users SET cards = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *',
      [newCardsString, userId]
    );

    console.log(`‚úÖ –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${recipe} -> ${craftedCard} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}`);

    res.json({ 
      status: 'success', 
      message: '–ö—Ä–∞—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', 
      user: updateResult.rows[0],
      craftedCard: craftedCard,
      recipe: recipe
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ ${recipe} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// ===== GAME API =====

// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
app.post('/api/game/room', async (req, res) => {
  const { room_code, player1, bet = 0 } = req.body;
  logRequest(req, `üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã: ${room_code} (Player1: ${player1}, Bet: ${bet})`);

  if (!room_code || !player1) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –∏ ID –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
    const activeGame = await client.query(
      `SELECT id, room_code, game_state FROM game 
       WHERE (player1 = $1 OR player2 = $1) 
       AND game_state IN ('waiting', 'game')`,
      [player1]
    );

    if (activeGame.rows.length > 0) {
      console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${player1} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ: ${activeGame.rows[0].room_code}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
        active_room: activeGame.rows[0].room_code
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞
    const existingRoom = await client.query('SELECT id FROM game WHERE room_code = $1', [room_code]);
    if (existingRoom.rows.length > 0) {
      console.log(`‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${room_code}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
      });
    }

    const result = await client.query(`
      INSERT INTO game (
        room_code, 
        player1, 
        bet
      ) VALUES ($1, $2, $3) RETURNING *`,
      [room_code, player1, bet]
    );

    console.log(`‚úÖ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${room_code} (ID: ${result.rows[0].id})`);

    res.json({ 
      status: 'success', 
      message: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!', 
      room: result.rows[0] 
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room_code}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–æ–¥—É
app.get('/api/game/room/:room_code', async (req, res) => {
  const roomCode = req.params.room_code;
  logRequest(req, `üîç –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã: ${roomCode}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT * FROM game WHERE room_code = $1', [roomCode]);

    if (result.rows.length > 0) {
      const room = result.rows[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
      if (room.game_state === 'closed') {
        console.log(`‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞: ${roomCode}`);
        res.status(404).json({ 
          status: 'error', 
          message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞' 
        });
        return;
      }

      console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${roomCode} (ID: ${room.id}, —Å—Ç–∞—Ç—É—Å: ${room.game_state})`);
      res.json({ 
        status: 'success', 
        room: room
      });
    } else {
      console.log(`‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${roomCode}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã ${roomCode}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø–æ ID
app.get('/api/game/room/id/:room_id', async (req, res) => {
  const roomId = req.params.room_id;
  logRequest(req, `üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID: ${roomId}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT * FROM game WHERE id = $1', [roomId]);

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID: ${roomId}`);
      res.json({ 
        status: 'success', 
        room: result.rows[0]
      });
    } else {
      console.log(`‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID: ${roomId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/game/check-active/:user_id', async (req, res) => {
  const userId = req.params.user_id;
  logRequest(req, `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      `SELECT id, room_code, game_state, player1, player2, bet FROM game 
       WHERE (player1 = $1 OR player2 = $1) 
       AND game_state IN ('waiting', 'game')`,
      [userId]
    );

    if (result.rows.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${result.rows[0].room_code}`);
      res.json({ 
        status: 'success', 
        active_game: result.rows[0]
      });
    } else {
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      res.json({ 
        status: 'success', 
        active_game: null
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
app.put('/api/game/room/:room_id', async (req, res) => {
  const roomId = req.params.room_id;
  const updates = req.body;
  logRequest(req, `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ID: ${roomId} (${JSON.stringify(updates)})`);

  let client;
  try {
    client = await pool.connect();

    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è player2, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
    if (updates.player2) {
      const activeGame = await client.query(
        `SELECT id, room_code, game_state FROM game 
         WHERE (player1 = $1 OR player2 = $1) 
         AND game_state IN ('waiting', 'game')
         AND id != $2`,
        [updates.player2, roomId]
      );

      if (activeGame.rows.length > 0) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${updates.player2} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ: ${activeGame.rows[0].room_code}`);
        return res.status(400).json({ 
          status: 'error', 
          message: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
          active_room: activeGame.rows[0].room_code
        });
      }
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updateFields = [];
    const values = [];
    let valueIndex = 1;

    Object.keys(updates).forEach(key => {
      if (updates[key] !== undefined) {
        updateFields.push(`${key} = $${valueIndex}`);
        values.push(updates[key]);
        valueIndex++;
      }
    });

    if (updateFields.length === 0) {
      return res.status(400).json({
        status: 'error',
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }

    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
    values.push(roomId);

    const query = `UPDATE game SET ${updateFields.join(', ')} WHERE id = $${valueIndex} RETURNING *`;
    const result = await client.query(query, values);

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ID ${roomId}`);
      res.json({ 
        status: 'success', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 
        room: result.rows[0] 
      });
    } else {
      console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ID ${roomId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
app.put('/api/user/:id/game-stats', async (req, res) => {
  const userId = req.params.id;
  const { winner, games, loses } = req.body;
  logRequest(req, `üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ ID: ${userId} (games: ${games}, winner: ${winner}, loses: ${loses})`);

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const currentStats = await client.query('SELECT winner, games, loses FROM users WHERE id = $1', [userId]);

    if (currentStats.rows.length === 0) {
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const current = currentStats.rows[0];
    const newWinner = current.winner + (winner || 0);
    const newGames = current.games + (games || 0);
    const newLoses = current.loses + (loses || 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const result = await client.query(
      'UPDATE users SET winner = $1, games = $2, loses = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $4 RETURNING *',
      [newWinner, newGames, newLoses, userId]
    );

    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}: –∏–≥—Ä ${newGames}, –ø–æ–±–µ–¥ ${newWinner}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π ${newLoses}`);

    res.json({ 
      status: 'success', 
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 
      user: result.rows[0] 
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –±–∞–ª–∞–Ω—Å—É
app.get('/api/leaderboard', async (req, res) => {
  logRequest(req, 'üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ –±–∞–ª–∞–Ω—Å—É
    const result = await client.query(
      'SELECT id, first_name, last_name, username, balance, photo_url FROM users ORDER BY balance DESC LIMIT 10'
    );

    console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    res.json({ 
      status: 'success', 
      leaderboard: result.rows
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
app.get('/api/leaderboard/position/:user_id', async (req, res) => {
  const userId = req.params.user_id;
  logRequest(req, `üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await client.query(`
      SELECT position FROM (
        SELECT id, ROW_NUMBER() OVER (ORDER BY balance DESC) as position 
        FROM users
      ) ranked 
      WHERE id = $1
    `, [userId]);

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}: ${result.rows[0].position}`);
      res.json({ 
        status: 'success', 
        position: result.rows[0].position
      });
    } else {
      res.json({ 
        status: 'success', 
        position: null
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
app.delete('/api/game/room/:room_id', async (req, res) => {
  const roomId = req.params.room_id;
  logRequest(req, `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ID: ${roomId}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('DELETE FROM game WHERE id = $1 RETURNING *', [roomId]);

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ID ${roomId}`);
      res.json({ 
        status: 'success', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!' 
      });
    } else {
      console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID ${roomId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
async function cleanupClosedRooms() {
  let client;
  try {
    client = await pool.connect();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å)
    const inactiveResult = await client.query(`
      UPDATE game 
      SET game_state = 'closed', updated_at = CURRENT_TIMESTAMP 
      WHERE game_state = 'waiting' 
      AND updated_at < NOW() - INTERVAL '5 minutes'
      RETURNING room_code
    `);

    if (inactiveResult.rows.length > 0) {
      console.log(`üîí –ó–∞–∫—Ä—ã—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ${inactiveResult.rows.length}`);
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'closed' –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
    const closedResult = await client.query(`
      DELETE FROM game 
      WHERE game_state = 'closed' 
      AND updated_at < NOW() - INTERVAL '10 seconds'
      RETURNING room_code
    `);

    if (closedResult.rows.length > 0) {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç: ${closedResult.rows.length}`);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
    const autoFinishResult = await client.query(`
      UPDATE game 
      SET game_state = 'finished', updated_at = CURRENT_TIMESTAMP 
      WHERE game_state = 'game' 
      AND updated_at < NOW() - INTERVAL '30 seconds'
      RETURNING room_code
    `);

    if (autoFinishResult.rows.length > 0) {
      console.log(`‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: ${autoFinishResult.rows.length}`);
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
    const finishedResult = await client.query(`
      DELETE FROM game 
      WHERE game_state = 'finished' 
      AND updated_at < NOW() - INTERVAL '1 minute'
      RETURNING room_code
    `);

    if (finishedResult.rows.length > 0) {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä: ${finishedResult.rows.length}`);
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç:', err.message);
  } finally {
    if (client) client.release();
  }
}

// –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
app.post('/api/user/transfer-card', async (req, res) => {
  const { fromUserId, toUserId, cardKey } = req.body;
  logRequest(req, `üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: ${cardKey} –æ—Ç ${fromUserId} –∫ ${toUserId}`);

  if (!fromUserId || !toUserId || !cardKey) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: fromUserId, toUserId, cardKey' 
    });
  }

  if (fromUserId === toUserId) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('BEGIN');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const fromUserResult = await client.query('SELECT * FROM users WHERE id = $1', [fromUserId]);
    if (fromUserResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        status: 'error', 
        message: '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const toUserResult = await client.query('SELECT * FROM users WHERE id = $1', [toUserId]);
    if (toUserResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const fromUser = fromUserResult.rows[0];
    const toUser = toUserResult.rows[0];

    // –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    let fromUserCardsString = fromUser.cards || '';
    const fromUserCardsList = fromUserCardsString.trim() === '' || fromUserCardsString === '[]' ? [] : 
      fromUserCardsString.trim().split(' ').map(card => card.trim()).filter(card => card.length > 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const cardIndex = fromUserCardsList.findIndex(card => card.toLowerCase() === cardKey.toLowerCase());
    if (cardIndex === -1) {
      await client.query('ROLLBACK');
      console.log(`‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromUserId}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏' 
      });
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    fromUserCardsList.splice(cardIndex, 1);
    const newFromUserCardsString = fromUserCardsList.join(' ');

    // –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    let toUserCardsString = toUser.cards || '';
    const toUserCardsList = toUserCardsString.trim() === '' || toUserCardsString === '[]' ? [] : 
      toUserCardsString.trim().split(' ').map(card => card.trim()).filter(card => card.length > 0);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    toUserCardsList.push(cardKey);
    const newToUserCardsString = toUserCardsList.join(' ');

    console.log(`üíæ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardKey}:`);
    console.log(`üíæ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: "${fromUserCardsString}" -> "${newFromUserCardsString}"`);
    console.log(`üíæ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: "${toUserCardsString}" -> "${newToUserCardsString}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await client.query(
      'UPDATE users SET cards = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
      [newFromUserCardsString, fromUserId]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await client.query(
      'UPDATE users SET cards = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
      [newToUserCardsString, toUserId]
    );

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');

    console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardKey} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç ${fromUserId} –∫ ${toUserId}`);

    res.json({ 
      status: 'success', 
      message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞!',
      transferDetails: {
        cardKey: cardKey,
        fromUser: fromUser.first_name,
        toUser: toUser.first_name
      }
    });
  } catch (err) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (client) {
      try {
        await client.query('ROLLBACK');
      } catch (rollbackErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', rollbackErr.message);
      }
    }

    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardKey}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç–æ—á–∫–∏', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
app.post('/api/user/:id/sell-card', async (req, res) => {
  const userId = req.params.id;
  const { cardKey, price } = req.body;
  logRequest(req, `üí∞ –ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: ${cardKey} –∑–∞ ${price} –∫–ª—é—à–µ–∫ (ID: ${userId})`);

  if (!cardKey || !price) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ö–ª—é—á –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT * FROM users WHERE id = $1', [userId]);

    if (userResult.rows.length === 0) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ID ${userId}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const user = userResult.rows[0];

    // –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let currentCards = user.cards || '';
    let cardsList = currentCards.trim() === '' || currentCards === '[]' ? [] : 
      currentCards.trim().split(' ').map(card => card.trim()).filter(card => card.length > 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cardIndex = cardsList.findIndex(card => card.toLowerCase() === cardKey.toLowerCase());
    if (cardIndex === -1) {
      console.log(`‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏' 
      });
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    cardsList.splice(cardIndex, 1);
    const newCardsString = cardsList.join(' ');
    const newBalance = user.balance + price;

    console.log(`üíæ –ü—Ä–æ–¥–∞–∂–∞: –±–∞–ª–∞–Ω—Å ${user.balance} -> ${newBalance}, –∫–∞—Ä—Ç–æ—á–∫–∏ "${currentCards}" -> "${newCardsString}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await client.query(
      'UPDATE users SET balance = $1, cards = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $3 RETURNING *',
      [newBalance, newCardsString, userId]
    );

    console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–Ω–∞: ${cardKey} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID ${userId} –∑–∞ ${price} –∫–ª—é—à–µ–∫`);

    res.json({ 
      status: 'success', 
      message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞!', 
      user: updateResult.rows[0],
      soldCard: cardKey,
      earnedAmount: price
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardKey} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
app.get('/api/check-subscription/:user_id', async (req, res) => {
  const userId = req.params.user_id;
  logRequest(req, `üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);

  const TELEGRAM_BOT_TOKEN = '8147352192:AAFSieCfgxplnvkMyHGHqzkisinBjP1lx-I';
  const CHANNEL_ID = '-1002654964467';

  try {
    const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChatMember?chat_id=${CHANNEL_ID}&user_id=${userId}`;
    
    const response = await fetch(telegramApiUrl);
    const data = await response.json();

    if (data.ok) {
      const status = data.result.status;
      const isSubscribed = ['creator', 'administrator', 'member'].includes(status);
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${status} (–ø–æ–¥–ø–∏—Å–∞–Ω: ${isSubscribed})`);
      
      res.json({ 
        status: 'success', 
        isSubscribed: isSubscribed,
        subscriptionStatus: status
      });
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${data.description}`);
      res.json({ 
        status: 'success', 
        isSubscribed: false,
        error: data.description
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 
      error: err.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
app.get('/api/online-count', async (req, res) => {
  logRequest(req, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω');

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç
    const result = await client.query(`
      SELECT COUNT(*) as online_count 
      FROM users 
      WHERE updated_at > NOW() - INTERVAL '5 minutes'
    `);

    const onlineCount = parseInt(result.rows[0].online_count) || 0;

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${onlineCount}`);

    res.json({ 
      status: 'success', 
      onlineCount: onlineCount
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// ===== SPONSORS API =====

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
app.get('/api/sponsors', async (req, res) => {
  logRequest(req, '‚ú® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤');

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT * FROM sponsors ORDER BY position ASC');

    console.log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${result.rows.length}`);
    res.json({ 
      status: 'success', 
      sponsors: result.rows
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞ (–∞–¥–º–∏–Ω)
app.put('/api/admin/sponsors/:position', async (req, res) => {
  const position = req.params.position;
  const { name, url_channel, photo_url } = req.body;
  logRequest(req, `‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position}: ${name}`);

  if (!name || !url_channel || !photo_url) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: name, url_channel, photo_url' 
    });
  }

  const positionNum = parseInt(position);
  if (![1, 2, 3].includes(positionNum)) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1, 2 –∏–ª–∏ 3' 
    });
  }

  let client;
  try {
    client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ø–æ–Ω—Å–æ—Ä –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const existingResult = await client.query('SELECT position FROM sponsors WHERE position = $1', [positionNum]);
    
    if (existingResult.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞
      const result = await client.query(
        'UPDATE sponsors SET name = $1, url_channel = $2, photo_url = $3, updated_at = CURRENT_TIMESTAMP WHERE position = $4 RETURNING *',
        [name, url_channel, photo_url, positionNum]
      );
      console.log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${positionNum}: ${name}`);
      res.json({ 
        status: 'success', 
        message: '–°–ø–æ–Ω—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 
        sponsor: result.rows[0] 
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞
      const result = await client.query(
        'INSERT INTO sponsors (position, name, url_channel, photo_url) VALUES ($1, $2, $3, $4) RETURNING *',
        [positionNum, name, url_channel, photo_url]
      );
      console.log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${positionNum}: ${name}`);
      res.json({ 
        status: 'success', 
        message: '–°–ø–æ–Ω—Å–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', 
        sponsor: result.rows[0] 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–º ${positionNum}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–º', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞ (–∞–¥–º–∏–Ω)
app.delete('/api/admin/sponsors/:position', async (req, res) => {
  const position = req.params.position;
  logRequest(req, `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏–∏ ${position}`);

  const positionNum = parseInt(position);
  if (![1, 2, 3].includes(positionNum)) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1, 2 –∏–ª–∏ 3' 
    });
  }

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('DELETE FROM sponsors WHERE position = $1 RETURNING *', [positionNum]);

    if (result.rows.length > 0) {
      console.log(`‚úÖ –°–ø–æ–Ω—Å–æ—Ä —É–¥–∞–ª–µ–Ω —Å –ø–æ–∑–∏—Ü–∏–∏ ${positionNum}`);
      res.json({ 
        status: 'success', 
        message: '–°–ø–æ–Ω—Å–æ—Ä —É–¥–∞–ª–µ–Ω!' 
      });
    } else {
      console.log(`‚ùå –°–ø–æ–Ω—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${positionNum}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–°–ø–æ–Ω—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞ ${positionNum}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// ===== CASES API =====

// –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
app.post('/api/case/open', async (req, res) => {
  const { userId, caseType } = req.body;
  logRequest(req, `üì¶ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞: ${caseType} (ID: ${userId})`);

  if (!userId || !caseType) {
    return res.status(400).json({ 
      status: 'error', 
      message: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –∫–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ–π—Å–æ–≤
  const caseConfigs = {
    'start': {
      price: 29,
      rewards: {
        'rare': { weight: 70, cards: ['–∞–±—Ä–æ—Å–∏–º–æ–≤', '–±–∞—Ä—É–ª–∏–Ω', '—É–∏–ª—å—è–º', '–≥–µ—Ä–∞—Å—å–∫–∏–Ω', '–¥—ã–Ω—è–∫', '–∫–∞–º–∞—Ä–∞', '–∫–ª–∞—Å—Å–æ–Ω', '–∫–æ–Ω—é—à–∫–æ–≤', '–ª–∏'] },
        'superrare': { weight: 25, cards: ['–≥—Ä–∏—Ü—é–∫', '—Ç–∫–∞—á–µ–≤_–∞', '–±–∞—Ä–∞–±–∞–Ω–æ–≤', '–∞–π–º—É—Ä–∑–∏–Ω', '–±–æ—Ä–∏–∫–æ–≤', '–≥–ª–æ—Ç–æ–≤', '–¥–µ–º—á–µ–Ω–∫–æ', '–¥—Ä–æ–∑–¥–æ–≤', '–∏–ª—å–µ–Ω–∫–æ', '–∫–∞—Ä–∞', '–º–∞–º–∏–Ω', '–ª–æ–∫—Ç–∏–æ–Ω–æ–≤', '—Ñ—É', '—Ä—É—à–∞–Ω'] },
        'epic': { weight: 5, cards: ['–¥–µ–º–∏–¥–æ–≤', '—Ö–º–µ–ª–µ–≤—Å–∫–∏–π', '–≥—É—Ç–∏–∫', '–∫–∞–≥–∞—Ä–ª–∏—Ü–∫–∏–π', '–∫–∞—é–º–æ–≤', '–≥–æ–ª–¥–æ–±–∏–Ω'] }
      }
    }
  };

  const caseConfig = caseConfigs[caseType];
  if (!caseConfig) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–µ–π—Å–∞' 
    });
  }

  let client;
  try {
    client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT * FROM users WHERE id = $1', [userId]);

    if (userResult.rows.length === 0) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ID ${userId}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const user = userResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.balance < caseConfig.price) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}: ${user.balance} < ${caseConfig.price}`);
      return res.status(400).json({ 
        status: 'error', 
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—à–µ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞' 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –≤—ã–ø–∞–≤—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const random = Math.random() * 100;
    let selectedRarity = 'rare';
    let cumulativeWeight = 0;

    for (const [rarity, config] of Object.entries(caseConfig.rewards)) {
      cumulativeWeight += config.weight;
      if (random <= cumulativeWeight) {
        selectedRarity = rarity;
        break;
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    const availableCards = caseConfig.rewards[selectedRarity].cards;
    const selectedCard = availableCards[Math.floor(Math.random() * availableCards.length)];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let currentCards = user.cards || '';
    let newCardsString = '';

    if (!currentCards || currentCards.trim() === '' || currentCards === '[]') {
      newCardsString = selectedCard;
    } else {
      newCardsString = currentCards.trim() + ' ' + selectedCard;
    }

    const newBalance = user.balance - caseConfig.price;

    console.log(`üíæ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞: –±–∞–ª–∞–Ω—Å ${user.balance} -> ${newBalance}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ "${selectedCard}" (${selectedRarity})`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await client.query(
      'UPDATE users SET balance = $1, cards = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $3 RETURNING *',
      [newBalance, newCardsString, userId]
    );

    console.log(`‚úÖ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç: ${selectedCard} (${selectedRarity}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}`);

    res.json({ 
      status: 'success', 
      message: '–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!', 
      card: {
        name: selectedCard,
        rarity: selectedRarity
      },
      newBalance: newBalance,
      user: updateResult.rows[0]
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ ${caseType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// ===== ADMIN API =====

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
app.get('/api/admin/maintenance', async (req, res) => {
  logRequest(req, 'üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç');

  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT maintenance, whitelist FROM admin LIMIT 1');

    if (result.rows.length > 0) {
      const maintenance = result.rows[0].maintenance;
      const whitelist = result.rows[0].whitelist || '';
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç: ${maintenance}, whitelist: ${whitelist}`);
      res.json({ 
        status: 'success', 
        maintenance: maintenance,
        whitelist: whitelist
      });
    } else {
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
      await client.query('INSERT INTO admin (maintenance, whitelist) VALUES (0, \'\')');
      res.json({ 
        status: 'success', 
        maintenance: 0,
        whitelist: ''
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
app.put('/api/admin/maintenance', async (req, res) => {
  const { maintenance, whitelist } = req.body;
  logRequest(req, `üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç: ${maintenance}, whitelist: ${whitelist}`);

  if (maintenance === undefined || maintenance === null) {
    return res.status(400).json({ 
      status: 'error', 
      message: '–°—Ç–∞—Ç—É—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    });
  }

  let client;
  try {
    client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å
    const existingResult = await client.query('SELECT maintenance FROM admin LIMIT 1');
    
    if (existingResult.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      if (whitelist !== undefined) {
        await client.query(
          'UPDATE admin SET maintenance = $1, whitelist = $2',
          [maintenance, whitelist || '']
        );
      } else {
        await client.query('UPDATE admin SET maintenance = $1', [maintenance]);
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await client.query('INSERT INTO admin (maintenance, whitelist) VALUES ($1, $2)', [maintenance, whitelist || '']);
    }

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${maintenance}`);
    res.json({ 
      status: 'success', 
      message: '–°—Ç–∞—Ç—É—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!', 
      maintenance: maintenance,
      whitelist: whitelist || ''
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app.get('/api/admin/users', async (req, res) => {
  logRequest(req, 'üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏');

  let client;
  try {
    client = await pool.connect();
    const result = await client.query(`
      SELECT id, first_name, last_name, username, balance, ban, photo_url, created_at 
      FROM users 
      ORDER BY created_at DESC
    `);

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.rows.length}`);
    res.json({ 
      status: 'success', 
      users: result.rows
    });
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
app.put('/api/admin/user/:id/cards', async (req, res) => {
  const userId = req.params.id;
  const { cards } = req.body;
  logRequest(req, `üé¥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId} (–∞–¥–º–∏–Ω)`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      'UPDATE users SET cards = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *',
      [cards || '', userId]
    );

    if (result.rows.length > 0) {
      console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}`);
      res.json({ 
        status: 'success', 
        message: '–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 
        user: result.rows[0] 
      });
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: ID ${userId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
app.put('/api/admin/user/:id/ban', async (req, res) => {
  const userId = req.params.id;
  const { ban } = req.body;
  logRequest(req, `üî® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId} -> ${ban}`);

  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      'UPDATE users SET ban = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *',
      [ban, userId]
    );

    if (result.rows.length > 0) {
      const statusText = ban === 1 ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${userId} ${statusText}`);
      res.json({ 
        status: 'success', 
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${statusText}!`, 
        user: result.rows[0] 
      });
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∞: ID ${userId}`);
      res.status(404).json({ 
        status: 'error', 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∞ ${userId}:`, err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞', 
      error: err.message
    });
  } finally {
    if (client) client.release();
  }
});

// Start server
const server = app.listen(PORT, '0.0.0.0', async () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
  console.log('üöÄ –ü–æ—Ä—Ç:', PORT);
  console.log('üöÄ URL: http://0.0.0.0:' + PORT);
  console.log('üöÄ Environment:', process.env.NODE_ENV || 'development');
  await initDatabase();

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(cleanupClosedRooms, 60000);
  console.log('üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    pool.end(() => {
      console.log('üì¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
});

process.on('SIGINT', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    pool.end(() => {
      console.log('üì¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
});
